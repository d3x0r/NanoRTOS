


  Priciple of this OS is an attempt to replace DOS with a true multitasking
  environment in which I may write applications that do many jobs at once.
  Currently, the OS runs on top of DOS, and loads its applications itself
  from a configuration file.  Within the OS there are basically two ways
  in which applications can communicate with one another.  First, routines
  that are to be given to the public are registered for other people to
  request. Two, a message packet can be exported for another task to
  receive data.

  The first method of intertask communications is executed in the following
  manner:  the task loaded must have declared the given routines as public
  (more on this declaration found later), then it calls the routine to be
  registered with an underscore before its name.  For example:

        public(void,displayln,(arguments))
        { Code }

        ...

        void someroutine(void)
        {
          _displayln();
        }

  would register a routine called displayln that returned nothing, and
  that had the specified arguments passed to it.  On the other end, the
  routine must be declared as dynamic, with matching return parameters and
  arguments that should be passed.  Nothing prevents you from declaring
  the functions differently, but in order to maintain correct typecasting,
  you should declare them the same.  You need not call the routine any more
  times than just to use it.  If the routine that you call is not already
  loaded, then that thread is put to sleep until it is found and registered.
  There is a convention by which you may find out if the routine is loaded
  already so that either you may spawn the correct process, or could just
  skip over that code, an example of that follows:

        {
          ...
          if (loaded(routine))
          {
            /*do this code*/
          }
          else
           ...
        }

   An example of declaring a dynamic routine follows:

        dynamic(void,displayln,(arguments));

        ...

        void someroutine(void)
        {
          displayln(arguments);
        }

   All three of the above examples are generated by macros.  The macros can
   be found at the end of this document with explanations as to why they do
   what they do.

   The second method of intertask communication is via sent and received
   data messages.  First, a task may export a data message to another task
   via name for Example:

        Export("12345","status");

   would send the text message- 12345 to the task called status.  Then in
   status it would have to have a line resembling the following:

        Message=Import("status");

   which would return a far pointer to the first message queued to the
   routine status.  There is no restriction on a routine taking promiscuous
   packets that were actually destine for somebody else, however, it is
   unlikely that a routine could find out what another routine called itself.
   The data packets must be understood by both participants, and if you
   sent a packet of some type to another routine that did not understand what
   it was you gave it, then there is a programming error some where along
   the line.  Standard device drivers, which is what usually use this system,
   will have a set structure by which you give them messages.







Appendix A - Macros of Interest

First, right now, the OS only understands and loads .COM files.  these files
are direct memory images that are supposed to be loaded at Base_Seg:0100H.
The following undefinition is to make sure that somebody isn't telling
me to do something that is unreasonable.

        #ifdef relocateable   /*for future .EXE files*/
          #undef relocateable
        #endif


This is how to declare a routine as public.  It has a relocateable definition
which should work, but has been untested, and it is unknown what would if
it were used. The macro public is for general use, and the routine cleanup
is used for routines that must be gone through before the OS returns to DOS,
because I am still loading as a shell, this is important for the routine
to unhook interrupt vectors, or anything else that it might wish to do before
it is taken out of memory.

        #ifdef relocatable
        #define public_code(routine) { asm push ds;\
                                       asm mov dx,offset routine;\
                                       asm mov si,offset routine##name;\
                                       asm mov es,seg routine##name;\
                                       asm mov ds,seg routine;\
                                       asm mov ah,1;\
                                       asm int 0x60;\
                                       asm pop ds;}
        #else
        #define public_code(routine) { asm push ds;\
                                       asm mov dx,offset routine;\
                                       asm mov si,offset routine##name;\
                                       asm mov ax,cs;\
                                       asm mov es,ax;\
                                       asm mov ds,ax;\
                                       asm mov ah,1;\
                                       asm int 0x60;\
                                       asm pop ds;}
        #endif

        #define public(return,routine,args)  char routine##name[]=#routine; \
                                 return (far routine) args;         \
                                 void _##routine(void) public_code(routine);\
                                 return (far routine) args

        #define cleanup(return,routine,args)  char routine##name[]="!"#routine; \
                                   return (far routine) args;         \
                                   void _##routine(void) public_code(routine);\
                                   return (far routine) args


Now that you have seen the macro definition I will explain it.  The top
definitions for public_code are used by the macro public to form the routine
that has an underscore before its name.  The underscore routine is used
to actually register the routine.  The following is an example of how a
public definition would expand.

Before:
    public(void,displayln,(arguments))
    { code }

After:
    displaylnname="displayln";
    void (far displayln) (arguments);
    void _displayln(void) { public code }
    void (far displayln) (arguments)

    {code}

Cleanup expands the same except it puts an ! before the text name of
the routine.  Because when loader exits, it goes though and calls all of
the routines that start with an ! so that it may clean itself up gracefully.
The public code generates an int 60H call to the OS executive, with
register AH=1.  This is the executive service for registering a routine.
It sets up the registers ES:SI to point to the text name, and DS:DX to point
to the beginning of the routine.  The routine is declared twice, because
otherwise the name would be undefined for the public_code macro.

The following is the set of macros to define a dynamic routine.

        #ifdef relocateable
        #define Link_Code(routine)  {\
          asm mov dx,offset routine##name;\
          asm mov es,seg routine##name    \
          asm mov ax,0;\
          asm int 60h;\
        }
        #else
        #define Link_Code(routine)  {\
          asm mov dx,offset routine##name;\
          asm mov ax,cs; asm mov es,ax;\
          asm mov ax,0;\
          asm int 60h;\
        }
        #endif

        #define dynamic(return,routine,paramlist) char routine##name[]=#routine; \
                                                  return (far routine)paramlist \
                                                  Link_Code(routine)

The function similar to the public and cleanup macros, however, there is a
distinct difference.  These only generate one routine.  The following is
an example of how these expand.

Before:
     dynamic(void,displayln,(arguments));

After:
     displaylnname="displayln";
     void (far displayln) (arguments)
     { Link_Code(displayln) }

So, this creates a test string for displayln to pass to the exectutive to
get the appropriate routines address.  The link code generates an int 60H
call to the exeutive with AH=0, and ES:DX pointing to the text name.
Before the executive returns control to this routine, it modifies the code
so that rather than being the call to the executive, it becomes a far
jump to the actual routine.  This works because the call to this routine
was already a far call, and all of the parameters were already pushed onto
the stack, so when the actual routine finally gets jumped to, it looks as
though it was gotten to by a far call, as always.  If the routine does
not exist then the task will be put to sleep until it is found.

        #ifdef relocateable
        #define Find_Code(routine)  (\
          asm mov dx,offset routine##name;\
          asm mov es,seg routine##name    \
          asm mov ah,2;\
          asm int 60h;\
        )
        #else
        #define Find_Code(routine)  (\
          asm mov dx,offset routine##name;\
          asm mov ax,cs; asm mov es,ax;\
          asm mov ah,2;\
          asm int 60h;\
        )
        #endif

        #define locate(routine) char routine##name[]=#routine; \
                                     Find_Code(routine)

Relinquish
   This function is provided to volentarily give up control to the other
   threads and tasks that may be running.  The call is given a long
   parameter that is supposed to be stored as a status in the control
   block.  Normal operation is that if any status is present, then the
   task is not returned to.  So, this provides a way to be put to sleeep
   to avoid trying to do work that is not even possible at this
   point.  There is an Executive service to get to this also, (function 4).

   The relinquish is at this point volentary only, so not all of the
   registers are saved.  Any registers that are imperative to have saved
   must be saved manually.  If the future need calles for it, this
   function could be expanded to save and restore all registers to their
   original contents, as would be neccesary should the timer interrupt be
   connected to automatically preemt the tasks.  Note- this OS should be
   moved to protected mode, and the memory allocation scheme changed before
   the timer should be added, because there is no percentage in a DOS
   preemtptive scheduler.

Fork and Perish

  The OS provides a fork service-
        mov     ah,3
        int     60h
     which starts a new thread in the same code/data space as the
  caller.  This first thread returns a 0 in AX, the next thread
  returns a 1 in AX.  This is done by going through the beginning
  of the Relinquish setup, then duplicating the tasks control block,
  and creating a new stack.  The old stack is exactly copyied to the
  newly allocated one.  The service then branches to the end of the
  relinquish code.  The second thread begins as a result of a subsequent
  relinquish.

  After a thread is started, it is sometimes desireable to destory one
  of them.  The OS therefore provides function 4-
        mov     ah,5
        int     60h
      which ends the life of a thread.  The control structure and stack
  are deallocated, and the remaining tasks are checked to see if they
  use the code that the control structure pointed to.   If nobody owns
  the code, then the code space is also deallocated up.

